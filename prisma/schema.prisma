datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            Int            @id @default(autoincrement())
    email         String         @unique
    username      String
    password      String
    phoneNumber   String?
    address       String?
    verified      Boolean        @default(false)
    otp           String?
    otpExpiration DateTime?
    application   Application[]
    notification  Notification[]
    wishlist      Wishlist?
    socketId      String?
}

model Pet {
    id               Int            @id @default(autoincrement())
    name             String
    breed            String
    age              Int
    gender           String
    color            String?
    healthCondition  String?
    vaccination      Boolean
    adoptionStatus   AdoptionStatus
    images           String[]
    personality      String[]
    energyLevel      EnergyLevel
    trainingLevel    TrainingLevel
    strangerBehavior String?
    specialTraits    String?
    adoptionInfo     AdoptionInfo?
    application      Application?
    wishlist         Wishlist[]
    Notification     Notification[]
    createdAt        DateTime       @default(now())
    updatedAt        DateTime       @updatedAt
    MatchedPets      MatchedPets[]
}

model AdoptionInfo {
    id                Int             @id @default(autoincrement())
    idealHome         String?
    childrenFriendly  Boolean
    otherPetsFriendly Boolean
    experienceLevel   ExperienceLevel
    specialNeeds      String?
    pet               Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)
    petId             Int             @unique
}

enum AdoptionStatus {
    Available
    Pending
    Adopted
}

enum EnergyLevel {
    High
    Medium
    Low
}

enum Temperament {
    Friendly
    Shy
    Aggressive
    Calm
    Playful
}

enum TrainingLevel {
    None
    Basic
    Advanced
}

enum ExperienceLevel {
    FirstTimeOwner
    ExperiencedOwner
}

model Admin {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Application {
    id                Int               @id @default(autoincrement())
    firstName         String
    lastName          String
    phoneNumber       String
    email             String
    address           String
    householdMembers  String
    homeOwnership     Boolean
    petAllowed        Boolean
    outdoorArea       Boolean
    aloneHours        Int
    otherPetsInfo     String
    neuteredPets      Boolean
    upcomingEvents    String?
    applicationStatus ApplicationStatus @default(Pending)
    user              User              @relation(fields: [userId], references: [id])
    userId            Int
    pet               Pet               @relation(fields: [petId], references: [id])
    petId             Int               @unique
    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
}

enum ApplicationStatus {
    Pending
    Approved
    Rejected
}

model RescueStory {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    imageUrl    String[]
    rescueDate  DateTime
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model SuccessStory {
    id           Int      @id @default(autoincrement())
    title        String
    description  String
    imageUrl     String[]
    adoptionDate DateTime
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Wishlist {
    id           Int            @id @default(autoincrement())
    userId       Int            @unique
    breed        String?
    ageMin       Int?
    ageMax       Int?
    energyLevel  String?
    gender       String
    user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    pets         Pet[]
    Notification Notification[]
    createdAt    DateTime       @default(now())
    updatedAt    DateTime       @updatedAt
    MatchedPets  MatchedPets[]
}

model Notification {
    id         Int      @id @default(autoincrement())
    user       User     @relation(fields: [userId], references: [id])
    userId     Int
    wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
    wishlistId Int
    petId      Int
    pet        Pet      @relation(fields: [petId], references: [id])
    message    String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

model MatchedPets {
    wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
    wishlistId Int
    pet        Pet      @relation(fields: [petId], references: [id])
    petId      Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([wishlistId, petId])
}
